        -:    0:Source:TestBubbleSort.c
        -:    0:Graph:TestBubbleSort.gcno
        -:    0:Data:TestBubbleSort.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include "bubbleSort.h"
        -:    4:
function Test_one_num_sort called 2 returned 100% blocks executed 66%
        -:    5:void Test_one_num_sort()
        -:    6:{
        4:    7:	int array[1] = {1};
        -:    8:
        2:    9:	bubbleSort(array, 1);
        -:   10:
        4:   11:	assert(array[0] == 1);
branch  0 taken 0%
branch  1 taken 100%
        2:   12:}
        -:   13:
function Test_two_num_sort called 2 returned 100% blocks executed 60%
        -:   14:void Test_two_num_sort()
        -:   15:{
        4:   16:	int array[2] = {2, 1};
        -:   17:
        2:   18:	bubbleSort(array, 2);
        -:   19:
        4:   20:	assert(array[0] == 1);
branch  0 taken 0%
branch  1 taken 100%
        4:   21:	assert(array[1] == 2);
branch  0 taken 0%
branch  1 taken 100%
        2:   22:}
        -:   23:
function Test_three_num_sort called 2 returned 100% blocks executed 57%
        -:   24:void Test_three_num_sort()
        -:   25:{
        4:   26:        int array[3] = {3, 2, 1};
        -:   27:
        2:   28:        bubbleSort(array, 3);
        -:   29:
        4:   30:        assert(array[0] == 1);
branch  0 taken 0%
branch  1 taken 100%
        4:   31:        assert(array[1] == 2);
branch  0 taken 0%
branch  1 taken 100%
        4:   32:	assert(array[2] == 3);
branch  0 taken 0%
branch  1 taken 100%
        2:   33:}
        -:   34:
function Test_ten_num_sort called 2 returned 100% blocks executed 52%
        -:   35:void Test_ten_num_sort()
        -:   36:{
        4:   37:        int array[10] = {2, 1, 5, 7, 3, 9, 0, 6, 4, 8};
        -:   38:
        2:   39:        bubbleSort(array, 10);
        -:   40:
        4:   41:        assert(array[0] == 0);
branch  0 taken 0%
branch  1 taken 100%
        4:   42:	assert(array[1] == 1);
branch  0 taken 0%
branch  1 taken 100%
        4:   43:        assert(array[2] == 2);
branch  0 taken 0%
branch  1 taken 100%
        4:   44:	assert(array[3] == 3);
branch  0 taken 0%
branch  1 taken 100%
        4:   45:	assert(array[4] == 4);
branch  0 taken 0%
branch  1 taken 100%
        4:   46:	assert(array[5] == 5);
branch  0 taken 0%
branch  1 taken 100%
        4:   47:	assert(array[6] == 6);
branch  0 taken 0%
branch  1 taken 100%
        4:   48:	assert(array[7] == 7);
branch  0 taken 0%
branch  1 taken 100%
        4:   49:	assert(array[8] == 8);
branch  0 taken 0%
branch  1 taken 100%
        4:   50:	assert(array[9] == 9);
branch  0 taken 0%
branch  1 taken 100%
        2:   51:}
